/*
This file is a template...
*/

import {BITBOX} from "bitbox-sdk";
//import { CashCompiler, Contract, SignatureTemplate } from 'cashscript';
const {
  CashCompiler,
  ElectrumNetworkProvider,
  Contract,
  SignatureTemplate,
} = require('cashscript');

// general consts
let NETWORK = '###NETWORK###';
const MAINNET_API = '###MAINNET_API###';
const TESTNET_API = '###TESTNET_API###';

// wallet consts
const w_json_f = '###W_JSON###';
let mnemonic = '###MNEMONIC###';
const child_i = ###CHILD_I###;

// contract consts
const cash_f = '###CASH_F###';
const artifact_f = '###ARTIFACT_F###';
const con_info_json_f = '###C_JSON###';
const do_compile = ###DO_COMPILE###;


const fs = require('fs');
const outObj = new Object();


// @ts-ignore
async function create_wallet() {
	/*
	Creates an HDnode and saves its info into w_json_f.
	*/

	let bitbox = new BITBOX();
	if (NETWORK === 'testnet') {
		bitbox = new BITBOX({restURL: TESTNET_API});
	}

	if (mnemonic === '') {
		mnemonic = bitbox.Mnemonic.generate();
	}

	const rootSeed = bitbox.Mnemonic.toSeed(mnemonic);
	const hdNode = bitbox.HDNode.fromSeed(rootSeed, NETWORK);	// wallet

	// Create key pair and public key
	const childNode = bitbox.HDNode.derive(hdNode, child_i);
	const childKeyPair = bitbox.HDNode.toKeyPair(childNode);	// alice
	const childPK = bitbox.ECPair.toPublicKey(childKeyPair);	// alicePk

	// Write out the basic information into a json file
	const outObj = {
		mnemonic: mnemonic,
		hdNode: hdNode,
		childNode_i: child_i,
		childNode: childNode,
		childKeyPair: childKeyPair,
		childPK: childPK,
		cashAddress: bitbox.HDNode.toCashAddress(childNode),
	};
	fs.writeFile(w_json_f, JSON.stringify(outObj, null, 2), function (err) {
      if (err) return console.error(err)
      console.log(w_json_f + ' written successfully.');
    });

}

// @ts-ignore
async function init_contract() {
	/*
	This function creates and returns a new contract
	*/

	let bitbox = new BITBOX();
	if (NETWORK === 'testnet') {
		bitbox = new BITBOX({restURL: TESTNET_API});
	}

	// artifact
	const artifact = CashCompiler.compileFile(cash_f);
	/*
	if (do_compile) {
		const artifact = CashCompiler.compileFile(cash_f);
	}
	else {
		try{
			const artifact = require(artifact_f);
		} catch (err) {
			try{
				const artifact = require('.\\' + artifact_f);
			} catch (err) {
				console.log('Could not import ' +  artifact_f);
				process.exit(0);
			}
		}
	}
	*/

	// provider
	const provider = ###NET_PROVIDER###;

	// create a new contract
	const con = new Contract(artifact, [###CONSTRUCTOR_ARGS###], provider);
	// Write out the basic information into con_info_json_f
	const outObj = {
		address: con.address,
		constructor_args: [###CONSTRUCTOR_ARGS###],
		network_provider_str: '###NET_PROVIDER###'
	};
	fs.writeFile(con_info_json_f, JSON.stringify(outObj, null, 2), function (err) {
	  if (err) return console.error(err)
	  console.log(con_info_json_f + ' written successfully.')
	});

	return con;

}


// @ts-ignore
async function load_contract_info(){
	/*
	Load the info found at con_info_json_f, which is basically the contract's address and, a list of its constructor arguments.
	*/

	try {
	  var conInfo = require(con_info_json_f);
	} catch (err) {
		try {
			var conInfo = require('.\\' + con_info_json_f);
		} catch (err) {
			console.log('Could not open ' +  con_info_json_f);
			process.exit(0);
		}
	}
	console.log('loaded ' + con_info_json_f);
	return conInfo;
}

// @ts-ignore
async function load_wallet_info(){
	/*
	Load the info found at w_json_f
	*/

	try {
	  var conInfo = require(w_json_f);
	} catch (err) {
		try {
			var conInfo = require('.\\' + w_json_f);
		} catch (err) {
			console.log('Could not open ' +  w_json_f);
			process.exit(0);
		}
	}
	console.log('loaded ' + w_json_f);
	return conInfo;
}

// @ts-ignore
async function print_contract_info() {

	// const con = init_contract();
	const artifact = CashCompiler.compileFile(cash_f);
	const provider = ###NET_PROVIDER###;
	const con = new Contract(artifact, [###CONSTRUCTOR_ARGS###], provider);

	console.log('contract info:');
	console.log('address: ' + con.address);
	console.log('opcount: ' + con.opcount);
	console.log('bytesize: ' + con.bytesize);
	const contractBalance = await con.getBalance();
	console.log('balance: ' + contractBalance);
	console.log('UTXOs:');
	const utxos = await con.getUtxos();
	console.log(utxos);
}

// @ts-ignore
async function use_contract() {
	/*
	Use a contract by calling one of its functions
	*/

	// creator of tx:
	const walletInfo = await load_wallet_info();
	const childKeyPair = walletInfo.childKeyPair;	// alice
	const childPK = walletInfo.childPK;	// alicePk

	// contract contract:
	// const con = init_contract();
	const artifact = CashCompiler.compileFile(cash_f);
	const provider = ###NET_PROVIDER###;
	const con = new Contract(artifact, [###CONSTRUCTOR_ARGS###], provider);

	// build and send tx:
	const txDetails = ###TX_FUNC###;

	console.log('Tx details:');
	console.log(txDetails);

}



###MAIN###
