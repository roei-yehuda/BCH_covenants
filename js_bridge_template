/*
This file is a template...
*/

import {BITBOX} from "bitbox-sdk";
const {
  CashCompiler,
  ElectrumNetworkProvider,
  BitboxNetworkProvider,
  Contract,
  SignatureTemplate,
} = require('cashscript');
const cryptoHash = require('crypto-hashing')

const debug = ###DEBUG###

// general consts
let NETWORK = '###NETWORK###';
const MAINNET_API = '###MAINNET_API###';
const TESTNET_API = '###TESTNET_API###';

// wallet consts
const w_json_f = '###W_JSON###';
let mnemonic = '###MNEMONIC###';
const child_i = ###CHILD_I###;

// contract consts
const cash_f = '###CASH_F###';
const artifact_f = '###ARTIFACT_F###';
const con_info_json_f = '###C_JSON###';
const do_compile = ###DO_COMPILE###;


let bitbox = new BITBOX();
	if (NETWORK === 'testnet') {
		bitbox = new BITBOX({restURL: TESTNET_API});
	}

const fs = require('fs');
const outObj = new Object();


// @ts-ignore
async function create_wallet() {	// DEPRECATED
	/*
	Creates an HDnode and saves its info into w_json_f.
	*/

	if (mnemonic === '') {
		mnemonic = bitbox.Mnemonic.generate();
	}

	const rootSeed = bitbox.Mnemonic.toSeed(mnemonic);
	const hdNode = bitbox.HDNode.fromSeed(rootSeed, NETWORK);	// wallet
	const childNode = bitbox.HDNode.derive(hdNode, child_i);
	const childKeyPair = bitbox.HDNode.toKeyPair(childNode);	// alice
	const childPK = bitbox.ECPair.toPublicKey(childKeyPair);	// alicePk

	// Write out the basic information into a json file
	const outObj = {
		mnemonic: mnemonic,
		hdNode: hdNode,
		childNode_i: child_i,
		childNode: childNode,
		childKeyPair: childKeyPair,
		childPK: childPK,
		cashAddress: bitbox.HDNode.toCashAddress(childNode),
		legacyAddress: bitbox.HDNode.toLegacyAddress(childNode),
		WIF: bitbox.HDNode.toWIF(childNode)
	};
	fs.writeFile(w_json_f, JSON.stringify(outObj, null, 2), function (err) {
      if (err) return console.error(err)
      console.log(w_json_f + ' written successfully.');
    });

}


// @ts-ignore
async function get_wallet_info(mn?:string) {

	if (mnemonic === '') {
		if (mn!=undefined) {
			mnemonic = mn;
		} else {
			// const walletInfo = await load_wallet_info();
			// mnemonic = walletInfo.mnemonic;
			mnemonic = await load_wallet_mnemonic_from_json();
		}
	}

	const rootSeed = bitbox.Mnemonic.toSeed(mnemonic);
	const hdNode = bitbox.HDNode.fromSeed(rootSeed, NETWORK);	// wallet
	const childNode = bitbox.HDNode.derive(hdNode, child_i);
	const childKeyPair = bitbox.HDNode.toKeyPair(childNode);	// alice
	const childPK = bitbox.ECPair.toPublicKey(childKeyPair);	// alicePk
	const childPKH = cryptoHash('hash160', childPK).toString('hex');	// alicePkH

	if (debug) {
		console.log('in get_wallet_info:');
		console.log(mnemonic);
		console.log(childPKH);
	}

	const walletInfo = {
		mnemonic: mnemonic,
		hdNode: hdNode,
		childNode_i: child_i,
		childNode: childNode,
		childKeyPair: childKeyPair,
		childPK: childPK,
		childPKH: childPKH,
		cashAddress: bitbox.HDNode.toCashAddress(childNode),
		legacyAddress: bitbox.HDNode.toLegacyAddress(childNode),
		WIF: bitbox.HDNode.toWIF(childNode)
	};

	return walletInfo;


}

// @ts-ignore
async function init_contract() {
	/*
	This function creates and returns a new contract
	*/

	const walletInfo = await get_wallet_info();

	const artifact = CashCompiler.compileFile(cash_f);
	const provider = ###NET_PROVIDER###;
	const con = new Contract(artifact, [###CONSTRUCTOR_ARGS###], provider);

	if (debug) {
		console.log('in init_contract:');
		console.log(con.address);
	}

	// Write out the basic information into con_info_json_f
	const outObj = {
		address: con.address,
		constructor_args: [###CONSTRUCTOR_ARGS###],
		network_provider_str: '###NET_PROVIDER###'
	};
	fs.writeFile(con_info_json_f, JSON.stringify(outObj, null, 2), function (err) {
	  if (err) return console.error(err)
	  console.log(con_info_json_f + ' written successfully.')
	});

	return con;

}


// @ts-ignore
async function load_contract_info(){
	/*
	Load the info found at con_info_json_f, which is basically the contract's address and, a list of its constructor arguments.
	*/

	try {
	  var conInfo = require(con_info_json_f);
	} catch (err) {
		try {
			var conInfo = require('.\\' + con_info_json_f);
		} catch (err) {
			console.log('Could not open ' +  con_info_json_f);
			process.exit(0);
		}
	}
	console.log('loaded ' + con_info_json_f);
	return conInfo;
}

// @ts-ignore
async function load_wallet_mnemonic_from_json(){
	/*
	Load the info found at w_json_f
	*/

	try {
	  var walletInfo = require(w_json_f);
	} catch (err) {
		try {
			var walletInfo = require('.\\' + w_json_f);
		} catch (err) {
			console.log('Could not open ' +  w_json_f);
			process.exit(0);
		}
	}
	// console.log('loaded ' + w_json_f);
	return walletInfo.mnemonic;
}

// @ts-ignore
async function print_contract_info() {

	const walletInfo = await get_wallet_info();

	const artifact = CashCompiler.compileFile(cash_f);
	const provider = ###NET_PROVIDER###;
	const con = new Contract(artifact, [###CONSTRUCTOR_ARGS###], provider);

	console.log('contract info:');
	console.log('address: ' + con.address);
	console.log('opcount: ' + con.opcount);
	console.log('bytesize: ' + con.bytesize);
	// const contractBalance = await con.getBalance();
	let contractBalance = "";
	try {
		contractBalance = await con.getBalance();
	} catch (err){
		contractBalance = 'Not-Found';
	}
	console.log('balance: ' + contractBalance);
	console.log('UTXOs:');
	//const utxos = await con.getUtxos();
	let utxos = "";
	try {
		utxos = await con.getUtxos();
	} catch (err){
		utxos = 'Not-Found';
	}
	console.log(utxos);
}

// @ts-ignore
async function use_contract() {
	/*
	Use a contract by calling one of its functions
	*/

	// creator of tx:
	const walletInfo = await get_wallet_info();

	/*
	// creator of tx:
	if (mnemonic === '') {
		const walletInfo = await load_wallet_info();
		mnemonic = walletInfo.mnemonic;
	}
	const rootSeed = bitbox.Mnemonic.toSeed(mnemonic);
	const hdNode = bitbox.HDNode.fromSeed(rootSeed, NETWORK);	// wallet
	const childNode = bitbox.HDNode.derive(hdNode, child_i);
	const childKeyPair = bitbox.HDNode.toKeyPair(childNode);	// alice
	const childPK = bitbox.ECPair.toPublicKey(childKeyPair);	// alicePk
	*/


	/*
	// creator of tx:
	const walletInfo = await load_wallet_info();
	const childKeyPair = walletInfo.childKeyPair;	// alice
	const childPK = walletInfo.childPK;	// alicePk
	*/

	// create contract:
	const artifact = CashCompiler.compileFile(cash_f);
	const provider = ###NET_PROVIDER###;
	const con = new Contract(artifact, [###CONSTRUCTOR_ARGS###], provider);

	// build and send tx:
	const txDetails = ###TX_FUNC###;

	console.log('Tx details:');
	console.log(txDetails);

}



###MAIN###
